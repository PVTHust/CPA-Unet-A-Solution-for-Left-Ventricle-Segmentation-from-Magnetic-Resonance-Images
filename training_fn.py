# -*- coding: utf-8 -*-
"""training_fn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ps8JPX8OwQqo0NTsEXP46n5s0DeN7GMV
"""

def train_fn(data_loader,model,optimizer):
  model.train()
  total_loss=0.0
  train_iou = 0.0
  train_dice_coef = 0.0
  train_accuracy = 0.0
  for images,masks in tqdm(data_loader):
    images = images.to(device)
    masks = masks.to(device)
    optimizer.zero_grad()
    logits = model(images)
    loss = dice_loss(logits,masks)
    loss.backward()
    optimizer.step()
    train_iou+=iou_metric(logits,masks).detach().cpu().numpy()
    total_loss+=loss.detach().cpu().numpy()
    train_dice_coef+=dice_coef_metric(logits,masks).detach().cpu().numpy()
    train_accuracy+= accuracy_metric(logits,masks).detach().cpu().numpy()
  return total_loss/len(data_loader),train_iou/len(data_loader),train_dice_coef/len(data_loader),train_accuracy/len(data_loader)
def eval_fn(data_loader,model):
  model.eval()
  total_loss=0.0
  valid_iou =0.0
  valid_dice_coef = 0.0
  valid_accuracy = 0.0
  with torch.no_grad():
    for images,masks in tqdm(data_loader):
      images = images.to(device)
      masks = masks.to(device)
      logits = model(images)
      loss = dice_loss(logits,masks)
      valid_iou+=iou_metric(logits,masks).detach().cpu().numpy()
      valid_dice_coef+= dice_coef_metric(logits,masks).detach().cpu().numpy()
      valid_accuracy+= accuracy_metric(logits,masks).detach().cpu().numpy()
      total_loss+=loss.detach().cpu().numpy()
  return total_loss/len(data_loader),valid_dice_coef/len(data_loader),valid_accuracy/len(data_loader),valid_iou/len(data_loader)