# -*- coding: utf-8 -*-
"""DI_conv.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ps8JPX8OwQqo0NTsEXP46n5s0DeN7GMV
"""

class Upsample_(nn.Module):
    def __init__(self, scale=2):
        super(Upsample_, self).__init__()

        self.upsample = nn.Upsample(mode="bilinear", scale_factor=scale)

    def forward(self, x):
        return self.upsample(x)
#Dual Inception Convolution Module
class DI_conv(nn.Module):
  def __init__(self,channel,f1,f2,f3,f4):
    super(DI_conv,self).__init__()
    self.conv1 = nn.Sequential(
     nn.Conv2d(channel, f1, kernel_size=3, padding=1),
      nn.BatchNorm2d(f1),
     nn.ReLU())
    self.conv2 = nn.Sequential(
     nn.Conv2d(f1, f2, kernel_size=3, padding=1),
      nn.BatchNorm2d(f2),
     nn.ReLU())
    self.conv3 = nn.Sequential(
     nn.Conv2d(f2, f3, kernel_size=3, padding=1),
      nn.BatchNorm2d(f3),
     nn.ReLU())
    self.conv4 = nn.Sequential(
     nn.Conv2d(channel, f4, kernel_size=1, padding=0),
      nn.BatchNorm2d(f4)
     )
    self.batch = nn.BatchNorm2d(f4)
    self.out = nn.Sequential(
      nn.ReLU(),
      nn.BatchNorm2d(f4),
    )
  def forward(self,x):
    x1 = self.conv1(x)
    x2 = self.conv2(x1)
    x3 = self.conv3(x2)
    x4 = self.conv4(x)
    out = torch.cat([x1,x2,x3],dim=1)
    out = self.batch(out)
    out = out+x4
    return  self.out(out)